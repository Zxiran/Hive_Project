# load file into hdfs from local

#File 1
 hadoop fs -put /home/cloudera/testdir/project_files/AgentLogingReport.csv /user/cloudera/project_1/

#File 2
hadoop fs -put /home/cloudera/testdir/project_files/AgentPerformance.csv /user/cloudera/project_1/

# Create hive table for agentlogingreport
 create table temp_agent_loging_report
    (
     sr_no int,
     agent string,
     date string,
     login_time string,
     logout_time string,
     duration string
     )
     row format delimited
     fields terminated by ','
    stored as textfile;
    
# Create hive table for agentperformancereport
create external table temp_agent_performance
     (
     sr_no int,
     date string,
     agent string,
     total_chats int,
     avg_response_time string,
     avg_res_time string,
     avg_rating float,
     feedback int
     )
     row format delimited
     fields terminated by ','
     location 'hdfs:///user/cloudera/project_1/file_2'
     tblproperties('skip.header.line.count'='1');
    
# List of all agents' names.
  insert overwrite local directory '/home/cloudera/testdir/project_1/agent_names'
  select DISTINCT agent from temp_agent_loging_report;
  
  
# Find out agent average rating.

   insert overwrite local directory '/home/cloudera/testdir/project_1/agent_avg_rating'
     row format delimited
     fields terminated by '\t'
     select agent, avg(avg_rating) as overall_avg_rating from temp_agent_performance
     GROUP BY agent;
     
5. Total working days for each agents

     insert overwrite local directory '/home/cloudera/testdir/project_1/total_working_days'
     row format delimited
     fields terminated by ','
     stored as textfile
     select  agent ,COUNT(DISTINCT date)  from orc_agent_loging_report
     GROUP BY agent;
     
6. Total query that each agent have taken

     insert overwrite local directory '/home/cloudera/testdir/project_1/total_agent_query'
     row format delimited
     fields terminated by ':'
     stored as textfile
     select agent ,sum(total_chats) from temp_agent_performance
     GROUP BY agent;
     
7. Total Feedback that each agent have received
    insert overwrite local directory '/home/cloudera/testdir/project_1/agent_total_feedback'
     row format delimited
     fields terminated by ':'
     stored as textfile
     select agent ,sum(feedback) from temp_agent_performance
     GROUP BY agent;
     
8. Agent name who have average rating between 3.5 to 4

     insert overwrite local directory '/home/cloudera/testdir/project_1/agent_rating_3dot5_to_4'
     row format delimited
     fields terminated by ':'
     stored as textfile
     select agent,avg(avg_rating) as avg_rating from temp_agent_performance
     GROUP BY agent
     HAVING avg(avg_rating)>= 3.5 AND avg(avg_rating)<=4;
     
11. How many feedback agents have received more than 4.5 average
     
     insert overwrite local directory '/home/cloudera/testdir/project_1/agent_total_feedback_rating_4point5'
     row format delimited
     fields terminated by ':'
     select agent , sum(feedback) as total_feedback
     from temp_agent_performance
     WHERE avg_rating >4.5
     GROUP BY agent;
     
12. average weekly response time for each agent

# STEP 1:
# To solve this query  UDF dateformat.py was created so that date can be in the format of YYYY-MM-DD. That format enables us to use hive built-in fn "date_format()" which returns us the week of the month which is essential to solve the query


# Creating the orc table
 create table agent_performance_orc
     (
          sr_no int,
          date Date,
          agent string,
          total_chats int,
          avg_response_time string,
          avg_res_time string,
          avg_rating float,
          feedback int
          )
     stored as orc;

add file file:///usr/local/bin/python3.8

add file file:///home/cloudera/project_1/scripts/dateformat.py;

# Query to transform the date column and inserting it in table agent_performance_orc

insert into table agent_performance_orc select transform(sr_no,date,agent,total_chats,avg_response_time,avg_res_time,avg_rating,feedback) using 'python3.8 dateformat.py' as (num,newdate,name,chats,avg_resp,avg_res,avg_rating,feedback) from temp_agent_performance;

STEP 2:

# Transforming the time to sec and storing it in table for calculating the avg response time of each agent

add file file:///home/cloudera/project_1/scripts/timeinsec.py;

# Create orc table for transformed date time 

     create table transformed_agent_performance_orc
     (
     sr_no int,
     date Date,
      agent string,
      total_chats int,
     avg_resp_time_sec int,
     avg_res_time string,
     avg_rating float,
     feedback int
      )
     stored as orc;
 # Inserting the transformed response time in table   
 insert into table transformed_agent_performance_orc
 select transform(sr_no,date,agent,total_chats,avg_response_time,avg_res_time,avg_rating,feedback) using 'python3.8 timetosec.py' as  (num,newdate,name,chats,timeinsec,avg_res,avg_rating,feedback) from temp_agent_performance;
 
 # STEP 3:
 #Query to get average weekly response time for each agent

  select agent , date_format(date,'W') as week , avg(avg_resp_time_sec) as weekly_avg_resp from transformed_agent_performance_orc                                       
  WHERE total_chats !=0
  GROUP BY agent,date_format(date,'W')
  
  
13. average weekly resolution time for each agents
  # final script for transforming date , avg_resp_time , avg_res_time 
  
  add file file:///home/cloudera/project_1/scripts/p1_script.py
  
  select agent , avg(avg_res_time) , date_format(date,'W') from transformed_agent_performance_orc
    > WHERE total_chats !=0
    > GROUP BY agent,date_format(date,'W');
    
 # For converting weekly-avg-res-time again into HH:MM:SS format, store data in new table and than transform using udf "time_format.py"
 
    add file file:///home/cloudera/project_1/scripts/time_format.py
    
    create table agent_perf_weekly_avg_res
     (
     agent string,
     week_avg_res_time_min float,
     week string
     )
     stored as orc;
     
    # Loading the data into table 
    insert overwrite table agent_perf_weekly_avg_res
    select agent , avg(avg_res_time) , date_format(date,'W') from transformed_agent_performance_orc
    WHERE total_chats !=0
    GROUP BY agent,date_format(date,'W');
    
    # Storing the output in local directory
    
     insert overwrite local directory '/home/cloudera/project_1/outputs/week_avg_res_ofeachagent'
     row format delimited
     fields terminated by '\t'
     select transform(agent,week_avg_res_time_min,week) using 'python3.8 time_format.py' as (agent,time,week) from agent_perf_weekly_avg_res;
     
     
    
     
 



  
  


  
  
